1. c++ doesn't support string in switch as only primitive type are supported as 
    switch creates a lookup and optimises the operations.
    " Use Javascript as last resort "

2. No issues even if O(n^3) - sometimes that's the only possible way to do!

3. Iterating through a map
   > Initialize an iterator
        map<int,int>::iterator it;
        for(auto it=store.begin();it!=store.end();it++) {
            cout<< "Key1" << it->first;
            cout << "key2 << it->second;
        }
    
    // c++11 onwards
    for (auto x : symbolTable)
    {
            std::cout << x.first  // string (key)
              << ':' 
              << x.second // string's value 
              << std::endl;
    }
    
    // new way - c++17 !!
    for(auto [key,value]: store) {
        cout<< "key" << key << "value" << value;
    }

4. Use unordered_map, as it's faster (sometimes, map is faster!)

5. | x | ==> modulus of a num
    Use below methods...
 * abs() for int
 * fabs() for double
 * fabsf() for float

6. Check if key exists in map:
    1)
            if (m.find(key) != m.end())
                return "PRESENT";
    
    2)
            if (m.count(key) == 0)
                return "Not Present";

7. Store keys with multiple values: (helpful in maps)
    map<int, vector<int> > map_vector_mapping;

8. Initialize vector from array:
    vector<int> vect(arr, arr + n);

9. Create vector of size 10:
    vector<int> vect1(10);

10. Initialize vector in single line:
    vector<int> vect1 { 10, 20 };
    OR
    vector<int> vect1 = { 10, 20 };

    // NOTE: () - means size, {} - means values


11. Difference btw . and ->
- foo->bar() is the same as (*foo).bar().
- The parenthesizes above are necessary because of the binding strength of the * and . operators.
- *foo.bar() wouldn't work because Dot (.) operator is evaluated first
- Summary: when it's pointer use ->, when it's directly object given use '.'



