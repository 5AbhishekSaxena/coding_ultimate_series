1. c++ doesn't support string in switch as only primitive type are supported as 
    switch creates a lookup and optimises the operations.
    " Use Javascript as last resort "

2. No issues even if O(n^3) - sometimes that's the only possible way to do!

3. Iterating through a map
   > Initialize an iterator
        map<int,int>::iterator it;
        for(auto it=store.begin();it!=store.end();it++) {
            cout<< "Key1" << it->first;
            cout << "key2 << it->second;
        }
    
    // c++11 onwards
    for (auto x : symbolTable)
    {
            std::cout << x.first  // string (key)
              << ':' 
              << x.second // string's value 
              << std::endl;
    }
    
    // new way - c++17 !!
    for(auto [key,value]: store) {
        cout<< "key" << key << "value" << value;
    }

4. Use unordered_map, as it's faster (sometimes, map is faster!)

5. | x | ==> modulus of a num
    Use below methods...
 * abs() for int
 * fabs() for double
 * fabsf() for float

6. Check if key exists in map:
    1)
            if (m.find(key) != m.end())
                return "PRESENT";
    
    2)
            if (m.count(key) == 0)
                return "Not Present";

7. Store keys with multiple values: (helpful in maps)
    map<int, vector<int> > map_vector_mapping;

8. Initialize vector from array:
    vector<int> vect(arr, arr + n);

9. Create vector of size 10:
    vector<int> vect1(10);

10. Initialize vector in single line:
    vector<int> vect1 { 10, 20 };
    OR
    vector<int> vect1 = { 10, 20 };

    // NOTE: () - means size, {} - means values


11. Difference btw . and ->
- foo->bar() is the same as (*foo).bar().
- The parenthesizes above are necessary because of the binding strength of the * and . operators.
- *foo.bar() wouldn't work because Dot (.) operator is evaluated first
- Summary: when it's pointer use ->, when it's directly object given use '.'

12. Set is Binary Tree - O(N)- insert, delete, find
- Set in C++ STL is implemented using Binary Search Tree and we also know that the time complexity
of all cases(searching, inserting, deleting ) in BST is log (n) in the average case and O(n) in the worst case
- set<int> s(arr, arr + n);
- To iterate:
 set<int>::iterator itr
        = s.begin(); // s.begin() returns a pointer to first
                     // element in the set
 advance(itr, k - 1);

13. Size of int, long, signed, unsigned
4 byte --> unsigned int (0-2^32)....2^32 means 4...(10 digits in total)
4 byte --> signed int (-2^31 - +2^31)..... means 2....(10 digits in total)
so if signed -ve are shifted to + then + becomes 2 * 2^31 => 2^32

° long long int	8 byte	-(2^63) to (2^63)-1  (4.....(19 digits in total))
° unsigned long long int	8 byte	0 to 18,446,744,073,709,551,615  (20 digits in total) 
- Above unsigned long long int size is -> 2^64 (- double of unsigned int)
- For signed, one index is used for size hence size becomes - 2^63 (occupies both + and -)