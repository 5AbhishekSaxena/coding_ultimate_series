1. Wiggle Subsequence (alternate + and - difference, longest one)
- O(N^2) is easy as we just need need to keep pos, neg at each index and iterate
- But if we see clearly at each index we can use previous one. Keeping one same while increasing other if possible
- UPDATE: Top Down Approach (recursion) is done myself and understood clearly. Better to find recursive with memo way always!

2. Candy Problem ( the more priority child will get more candies than neighbour)
- First option is definitely Backtracking which gives TLE :( Hence do greedy approach
- Think of it as a graph problem where point at top will have more candy than neighbour
- Neighbour are at 2 sides left and right
- Hence we can first check from left to right and then from right to left, and finally do sum


3. Longest Consecutive Sequence (find consecutive from anywhere in array)
- Remember, for unordered_map and unordered_set, complexity on avg is O(1) hence we can make use of it
- Now to keep it O(1), a simple trick is to start counting consecutive only when previous doesn't exists
- Eg. for 100, 4, 2, 33, 3, 1 -> after inserting, we will start counting from 1 and not from 2, 3, 4 ->  in those we will just skip!

4. Interleaving Strings (was struck to understand how memoization used)
- LOGIC: There are 2 things to realize in this question
- * 1) There are many ways possible - hence it's a recursion problem
- * 2) The recursion problem has overlapping sub problems so it's a DP Problem
- * Understanding 2)
- => Let's say we have s1=aaa... and s2=aaa.... 
- s1(0) and s2(0) are taken!
- While calculating at index 1 of s1 and index 1 of s2 a false was received
- Hence now s2(0) and s1(0) are taken! but now again we came to above point s1(1) and s2(1) which is already calculated as false :(
- Hence use DP with memoization!

5. ðŸŒŸ (Took lot of time!) Jump Game VI - TRY THIS AGAIN!
- Understanding recursion with memo is easy but it gives TLE
- If we see in detail at each index, we need to require the max value formed in previous k
- Hence in each index we can find the max value formed in previous k + current
- BUT, "max value in previous k"- can be done using MAX HEAP! - o(logN)
- :NOTE: Make sure to remove the indices <i-k as from there you can't reach i (k step max is possible)

